name: OKRelease

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.14.3)'
        required: true
        default: 'v1.14.3'
      create_release:
        description: 'Create GitHub Release'
        required: true
        type: boolean
        default: true
      push_to_aliyun:
        description: 'Push to Aliyun Container Registry'
        required: true
        type: boolean
        default: false
      push_to_ghcr:
        description: 'Push to GitHub Container Registry (requires PAT)'
        required: true
        type: boolean
        default: false
      overwrite_release:
        description: 'Overwrite existing release if it exists'
        required: true
        type: boolean
        default: false
  push:
    tags:
      - "v*"
    branches:
      - dev

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
        include:
          - goos: linux
            goarch: s390x
          - goos: linux
            goarch: arm64

    name: Build artifacts
    runs-on: ubuntu-latest
    container:
      image: goreleaser/goreleaser-cross:v1.24
    steps:
      - run: |
          apt update && apt install unzip curl -y
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          chmod +x /usr/bin/yq

      - run: git config --global --add safe.directory /__w/nezha/nezha

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare frontends' dists
        run: |
          chmod +x ./script/fetch-frontends.sh && ./script/fetch-frontends.sh

      - name: Fetch IPInfo GeoIP Database
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          rm -f pkg/geoip/geoip.db
          wget -qO pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${IPINFO_TOKEN} || echo "GeoIP download failed, continuing without it"

      - name: Create minimal swagger docs to satisfy build
        run: |
          echo "Creating minimal swagger documentation to satisfy build requirements..."
          mkdir -p ./cmd/dashboard/docs
          
          cat > ./cmd/dashboard/docs/swagger.json << 'EOF'
          {
            "swagger": "2.0",
            "info": {
              "title": "Nezha Dashboard API",
              "description": "Nezha Monitoring System Dashboard API",
              "version": "1.0.0"
            },
            "host": "localhost:8000",
            "basePath": "/",
            "paths": {},
            "definitions": {}
          }
          EOF
          
          cat > ./cmd/dashboard/docs/docs.go << 'EOF'
          package docs
          
          var SwaggerInfo = &swaggerInfo{
          	Version:     "1.0.0",
          	Host:        "localhost:8000",
          	BasePath:    "/",
          	Schemes:     []string{},
          	Title:       "Nezha Dashboard API",
          	Description: "Nezha Monitoring System Dashboard API",
          }
          
          type swaggerInfo struct {
          	Version     string
          	Host        string
          	BasePath    string
          	Schemes     []string
          	Title       string
          	Description string
          }
          
          func init() {
          	SwaggerInfo.Schemes = []string{}
          }
          EOF
          
          echo "Minimal swagger docs created successfully"

      - name: Build with tag
        if: contains(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
        uses: goreleaser/goreleaser-action@v6
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --single-target --clean --skip=validate

      - name: Build snapshot
        if: contains(github.ref, 'refs/tags/') == false && github.event_name == 'push'
        uses: goreleaser/goreleaser-action@v6
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --single-target --clean --skip=validate --snapshot

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ./dist/*/*

  release:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    needs: build
    name: Release
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets

      - name: Archive and compress binaries
        run: |
          find assets/*/*/* -type f | while read -r file; do
            dir=$(dirname "$file")
            filename=$(basename "$file")
            fileWithoutExt="${filename%.*}"
            zip -jr "$dir/$fileWithoutExt.zip" "$file"
          done

      - name: Set release tag
        id: set-tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ inputs.release_tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Check if release exists
        id: check-release
        run: |
          RESPONSE=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.set-tag.outputs.tag }}" || echo "{}")
          if echo "$RESPONSE" | grep -q '"message":"Not Found"'; then
            echo "exists=false" >> $GITHUB_OUTPUT
          else
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.set-tag.outputs.tag }} already exists"
          fi

      - name: Delete existing release
        if: steps.check-release.outputs.exists == 'true' && (github.event_name == 'workflow_dispatch' && inputs.overwrite_release)
        run: |
          curl -X DELETE -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.set-tag.outputs.tag }}" || echo "Failed to delete release, continuing..."
          curl -X DELETE -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags/${{ steps.set-tag.outputs.tag }}" || echo "Failed to delete tag, continuing..."

      - name: Create Release
        if: steps.check-release.outputs.exists == 'false' || (github.event_name == 'workflow_dispatch' && inputs.overwrite_release)
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.set-tag.outputs.tag }}
          artifacts: "assets/*/*/*.zip"
          generateReleaseNotes: true
          allowUpdates: true

      - name: Skip Release
        if: steps.check-release.outputs.exists == 'true' && (github.event_name != 'workflow_dispatch' || !inputs.overwrite_release)
        run: |
          echo "Release ${{ steps.set-tag.outputs.tag }} already exists and overwrite is disabled. Skipping release creation."

      - name: Purge jsdelivr cache
        run: |
          curl -s https://purge.jsdelivr.net/gh/${{ github.repository_owner }}/nezha@master/script/install.sh
          curl -s https://purge.jsdelivr.net/gh/${{ github.repository_owner }}/nezha@master/script/nezha-agent.service
          curl -s https://purge.jsdelivr.net/gh/${{ github.repository_owner }}/nezha@master/script/docker-compose.yaml
          curl -s https://purge.jsdelivr.net/gh/${{ github.repository_owner }}/nezha@master/script/config.yaml

  release-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    needs: build
    name: Release Docker images
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets

      - name: Fix permissions
        run: |
          chmod -R +x ./assets/*
          mkdir -p dist
          mv ./assets/*/*/* ./dist/ || true

      - name: Extract branch name in tag
        id: extract_branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            export TAG_NAME="${{ inputs.release_tag }}"
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            export TAG_NAME=$(echo ${GITHUB_REF#refs/heads/})
          else
            export TAG_NAME=$(echo ${GITHUB_REF#refs/tags/})
          fi
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up image name
        run: |
          GHCR_IMAGE_NAME=$(echo "ghcr.io/${{ github.repository_owner }}/nezha" | tr '[:upper:]' '[:lower:]')
          if [ "${{ github.repository_owner }}" = "nezhahq" ]; then
            ALI_IMAGE_NAME="registry.cn-shanghai.aliyuncs.com/naibahq/nezha-dashboard"
          else
            ALI_IMAGE_NAME=$(echo "registry.cn-shanghai.aliyuncs.com/${{ github.repository_owner }}/nezha-dashboard" | tr '[:upper:]' '[:lower:]')
          fi
          echo "GHCR_IMAGE_NAME=$GHCR_IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "ALI_IMAGE_NAME=$ALI_IMAGE_NAME" >> $GITHUB_OUTPUT
        id: image-name

      - name: Build only (no push) - Default for manual trigger
        if: github.event_name == 'workflow_dispatch' && !inputs.push_to_ghcr && !inputs.push_to_aliyun
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/s390x
          push: false
          tags: |
            ${{ steps.image-name.outputs.GHCR_IMAGE_NAME }}:${{ steps.extract_branch.outputs.tag }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Build only (no push) - Default for branch push
        if: github.event_name == 'push' && !contains(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/s390x
          push: false
          tags: |
            ${{ steps.image-name.outputs.GHCR_IMAGE_NAME }}:${{ steps.extract_branch.outputs.tag }}

      - name: Build and push to GHCR with PAT
        if: (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && inputs.push_to_ghcr)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/s390x
          push: true
          tags: |
            ${{ steps.image-name.outputs.GHCR_IMAGE_NAME }}:${{ steps.extract_branch.outputs.tag }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
          secrets: |
            GITHUB_TOKEN=${{ secrets.HUB_TOKEN }}

      - name: Build and push to Aliyun
        if: (contains(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch') && (github.event_name != 'workflow_dispatch' || inputs.push_to_aliyun)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/s390x
          push: true
          tags: |
            ${{ steps.image-name.outputs.ALI_IMAGE_NAME }}:${{ steps.extract_branch.outputs.tag }}
          secrets: |
            ALI_USER=${{ secrets.ALI_USER }}
            ALI_PAT=${{ secrets.ALI_PAT }}

  # 可选：使用替代方法的 Docker 推送
  release-docker-alternative:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || (github.event_name == 'workflow_dispatch' && inputs.push_to_ghcr)
    needs: build
    name: Release Docker images (Alternative method)
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Extract branch name in tag
        id: extract_branch
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            export TAG_NAME="${{ inputs.release_tag }}"
          else
            export TAG_NAME=$(echo ${GITHUB_REF#refs/tags/})
          fi
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.HUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/nezha
          tags: |
            type=ref,event=tag
            type=raw,value=${{ steps.extract_branch.outputs.tag }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64,linux/s390x
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
